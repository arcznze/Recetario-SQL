//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\laona\source\repos\recetario\recetario\recetario.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class recetarioParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		GUION=1, REC_LBL=2, POR_LBL=3, TMP_LBL=4, TMC_LBL=5, CAL_LBL=6, ING_LBL=7, 
		ELA_LBL=8, FEC_LBL=9, HOR_LBL=10, DUR_LBL=11, TEM_LBL=12, COM=13, SEP=14, 
		SP=15, NUMBER=16, INT=17, FLOAT=18, LISTA=19, TEXT=20, WORD=21, WS=22;
	public const int
		RULE_program = 0, RULE_entry = 1, RULE_receta = 2, RULE_porciones = 3, 
		RULE_tiempoprep = 4, RULE_tiempococ = 5, RULE_calorias = 6, RULE_ingredientes = 7, 
		RULE_elaboracion = 8;
	public static readonly string[] ruleNames = {
		"program", "entry", "receta", "porciones", "tiempoprep", "tiempococ", 
		"calorias", "ingredientes", "elaboracion"
	};

	private static readonly string[] _LiteralNames = {
		null, "'-'", "'RECETA'", "'PORCIONES'", "'TIEMPO PREPARACION'", "'TIEMPO COCCION'", 
		"'CALORIAS'", "'INGREDIENTES'", "'ELABORACION'", "'FECHA'", "'HORA'", 
		"'DURACION'", "'TEMA'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "GUION", "REC_LBL", "POR_LBL", "TMP_LBL", "TMC_LBL", "CAL_LBL", 
		"ING_LBL", "ELA_LBL", "FEC_LBL", "HOR_LBL", "DUR_LBL", "TEM_LBL", "COM", 
		"SEP", "SP", "NUMBER", "INT", "FLOAT", "LISTA", "TEXT", "WORD", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "recetario.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static recetarioParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public recetarioParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public recetarioParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(recetarioParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntryContext[] entry() {
			return GetRuleContexts<EntryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntryContext entry(int i) {
			return GetRuleContext<EntryContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecetarioVisitor<TResult> typedVisitor = visitor as IrecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 18;
				entry();
				}
				}
				State = 21;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==GUION );
			State = 23;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RecetaContext receta() {
			return GetRuleContext<RecetaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PorcionesContext porciones() {
			return GetRuleContext<PorcionesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaloriasContext calorias() {
			return GetRuleContext<CaloriasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IngredientesContext ingredientes() {
			return GetRuleContext<IngredientesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElaboracionContext elaboracion() {
			return GetRuleContext<ElaboracionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TiempoprepContext[] tiempoprep() {
			return GetRuleContexts<TiempoprepContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TiempoprepContext tiempoprep(int i) {
			return GetRuleContext<TiempoprepContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TiempococContext[] tiempococ() {
			return GetRuleContexts<TiempococContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TiempococContext tiempococ(int i) {
			return GetRuleContext<TiempococContext>(i);
		}
		public EntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecetarioVisitor<TResult> typedVisitor = visitor as IrecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntryContext entry() {
		EntryContext _localctx = new EntryContext(Context, State);
		EnterRule(_localctx, 2, RULE_entry);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			receta();
			State = 26;
			porciones();
			State = 30;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 27;
					tiempoprep();
					}
					} 
				}
				State = 32;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 36;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 33;
					tiempococ();
					}
					} 
				}
				State = 38;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 39;
			calorias();
			State = 40;
			ingredientes();
			State = 41;
			elaboracion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecetaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUION() { return GetToken(recetarioParser.GUION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(recetarioParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(recetarioParser.SP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REC_LBL() { return GetToken(recetarioParser.REC_LBL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(recetarioParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(recetarioParser.TEXT, 0); }
		public RecetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receta; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecetarioVisitor<TResult> typedVisitor = visitor as IrecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReceta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecetaContext receta() {
		RecetaContext _localctx = new RecetaContext(Context, State);
		EnterRule(_localctx, 4, RULE_receta);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			Match(GUION);
			State = 44;
			Match(SP);
			State = 45;
			Match(REC_LBL);
			State = 46;
			Match(SEP);
			State = 47;
			Match(TEXT);
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP) {
				{
				State = 48;
				Match(SP);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PorcionesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUION() { return GetToken(recetarioParser.GUION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(recetarioParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(recetarioParser.SP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POR_LBL() { return GetToken(recetarioParser.POR_LBL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(recetarioParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(recetarioParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(recetarioParser.TEXT, 0); }
		public PorcionesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_porciones; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecetarioVisitor<TResult> typedVisitor = visitor as IrecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPorciones(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PorcionesContext porciones() {
		PorcionesContext _localctx = new PorcionesContext(Context, State);
		EnterRule(_localctx, 6, RULE_porciones);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			Match(GUION);
			State = 52;
			Match(SP);
			State = 53;
			Match(POR_LBL);
			State = 54;
			Match(SEP);
			State = 55;
			Match(NUMBER);
			State = 56;
			Match(SP);
			State = 57;
			Match(TEXT);
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP) {
				{
				State = 58;
				Match(SP);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TiempoprepContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUION() { return GetToken(recetarioParser.GUION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(recetarioParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(recetarioParser.SP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TMP_LBL() { return GetToken(recetarioParser.TMP_LBL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(recetarioParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(recetarioParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(recetarioParser.TEXT, 0); }
		public TiempoprepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tiempoprep; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecetarioVisitor<TResult> typedVisitor = visitor as IrecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTiempoprep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TiempoprepContext tiempoprep() {
		TiempoprepContext _localctx = new TiempoprepContext(Context, State);
		EnterRule(_localctx, 8, RULE_tiempoprep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			Match(GUION);
			State = 62;
			Match(SP);
			State = 63;
			Match(TMP_LBL);
			State = 64;
			Match(SEP);
			State = 65;
			Match(NUMBER);
			State = 66;
			Match(SP);
			State = 67;
			Match(TEXT);
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP) {
				{
				State = 68;
				Match(SP);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TiempococContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUION() { return GetToken(recetarioParser.GUION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(recetarioParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(recetarioParser.SP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TMC_LBL() { return GetToken(recetarioParser.TMC_LBL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(recetarioParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(recetarioParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(recetarioParser.TEXT, 0); }
		public TiempococContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tiempococ; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecetarioVisitor<TResult> typedVisitor = visitor as IrecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTiempococ(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TiempococContext tiempococ() {
		TiempococContext _localctx = new TiempococContext(Context, State);
		EnterRule(_localctx, 10, RULE_tiempococ);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(GUION);
			State = 72;
			Match(SP);
			State = 73;
			Match(TMC_LBL);
			State = 74;
			Match(SEP);
			State = 75;
			Match(NUMBER);
			State = 76;
			Match(SP);
			State = 77;
			Match(TEXT);
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP) {
				{
				State = 78;
				Match(SP);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaloriasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUION() { return GetToken(recetarioParser.GUION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(recetarioParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(recetarioParser.SP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAL_LBL() { return GetToken(recetarioParser.CAL_LBL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(recetarioParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(recetarioParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(recetarioParser.TEXT, 0); }
		public CaloriasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_calorias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecetarioVisitor<TResult> typedVisitor = visitor as IrecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalorias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaloriasContext calorias() {
		CaloriasContext _localctx = new CaloriasContext(Context, State);
		EnterRule(_localctx, 12, RULE_calorias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			Match(GUION);
			State = 82;
			Match(SP);
			State = 83;
			Match(CAL_LBL);
			State = 84;
			Match(SEP);
			State = 85;
			Match(NUMBER);
			State = 86;
			Match(SP);
			State = 87;
			Match(TEXT);
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP) {
				{
				State = 88;
				Match(SP);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IngredientesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUION() { return GetToken(recetarioParser.GUION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(recetarioParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(recetarioParser.SP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ING_LBL() { return GetToken(recetarioParser.ING_LBL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(recetarioParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(recetarioParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(recetarioParser.NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(recetarioParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(recetarioParser.TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COM() { return GetTokens(recetarioParser.COM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COM(int i) {
			return GetToken(recetarioParser.COM, i);
		}
		public IngredientesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ingredientes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecetarioVisitor<TResult> typedVisitor = visitor as IrecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIngredientes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IngredientesContext ingredientes() {
		IngredientesContext _localctx = new IngredientesContext(Context, State);
		EnterRule(_localctx, 14, RULE_ingredientes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(GUION);
			State = 92;
			Match(SP);
			State = 93;
			Match(ING_LBL);
			State = 94;
			Match(SEP);
			State = 95;
			Match(NUMBER);
			State = 96;
			Match(SP);
			State = 97;
			Match(TEXT);
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COM) {
				{
				{
				State = 98;
				Match(COM);
				State = 99;
				Match(NUMBER);
				State = 100;
				Match(SP);
				State = 101;
				Match(TEXT);
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP) {
				{
				State = 107;
				Match(SP);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElaboracionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUION() { return GetToken(recetarioParser.GUION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(recetarioParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(recetarioParser.SP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELA_LBL() { return GetToken(recetarioParser.ELA_LBL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(recetarioParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LISTA() { return GetTokens(recetarioParser.LISTA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LISTA(int i) {
			return GetToken(recetarioParser.LISTA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(recetarioParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(recetarioParser.TEXT, i);
		}
		public ElaboracionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elaboracion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IrecetarioVisitor<TResult> typedVisitor = visitor as IrecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElaboracion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElaboracionContext elaboracion() {
		ElaboracionContext _localctx = new ElaboracionContext(Context, State);
		EnterRule(_localctx, 16, RULE_elaboracion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			Match(GUION);
			State = 111;
			Match(SP);
			State = 112;
			Match(ELA_LBL);
			State = 113;
			Match(SEP);
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LISTA) {
				{
				{
				State = 114;
				Match(LISTA);
				State = 115;
				Match(SP);
				State = 116;
				Match(TEXT);
				}
				}
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP) {
				{
				State = 122;
				Match(SP);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x18', '\x80', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x3', '\x2', '\x6', 
		'\x2', '\x16', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x17', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 
		'\x1F', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\"', '\v', '\x3', '\x3', 
		'\x3', '\a', '\x3', '%', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '(', 
		'\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\x34', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', '>', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', 'H', '\n', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', 'R', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', '\\', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\a', '\t', 'i', '\n', '\t', '\f', '\t', '\xE', 
		'\t', 'l', '\v', '\t', '\x3', '\t', '\x5', '\t', 'o', '\n', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\a', '\n', 'x', '\n', '\n', '\f', '\n', '\xE', '\n', '{', 
		'\v', '\n', '\x3', '\n', '\x5', '\n', '~', '\n', '\n', '\x3', '\n', '\x2', 
		'\x2', '\v', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x2', '\x2', '\x2', '\x82', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x6', '-', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\x35', '\x3', '\x2', '\x2', '\x2', '\n', '?', '\x3', '\x2', 
		'\x2', '\x2', '\f', 'I', '\x3', '\x2', '\x2', '\x2', '\xE', 'S', '\x3', 
		'\x2', '\x2', '\x2', '\x10', ']', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'p', '\x3', '\x2', '\x2', '\x2', '\x14', '\x16', '\x5', '\x4', '\x3', 
		'\x2', '\x15', '\x14', '\x3', '\x2', '\x2', '\x2', '\x16', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x17', '\x15', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x18', '\x3', '\x2', '\x2', '\x2', '\x18', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x19', '\x1A', '\a', '\x2', '\x2', '\x3', '\x1A', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', '\x1C', '\x5', '\x6', '\x4', '\x2', '\x1C', 
		' ', '\x5', '\b', '\x5', '\x2', '\x1D', '\x1F', '\x5', '\n', '\x6', '\x2', 
		'\x1E', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1F', '\"', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\x1E', '\x3', '\x2', '\x2', '\x2', ' ', '!', '\x3', 
		'\x2', '\x2', '\x2', '!', '&', '\x3', '\x2', '\x2', '\x2', '\"', ' ', 
		'\x3', '\x2', '\x2', '\x2', '#', '%', '\x5', '\f', '\a', '\x2', '$', '#', 
		'\x3', '\x2', '\x2', '\x2', '%', '(', '\x3', '\x2', '\x2', '\x2', '&', 
		'$', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\'', ')', '\x3', '\x2', '\x2', '\x2', '(', '&', '\x3', '\x2', '\x2', 
		'\x2', ')', '*', '\x5', '\xE', '\b', '\x2', '*', '+', '\x5', '\x10', '\t', 
		'\x2', '+', ',', '\x5', '\x12', '\n', '\x2', ',', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '-', '.', '\a', '\x3', '\x2', '\x2', '.', '/', '\a', '\x11', 
		'\x2', '\x2', '/', '\x30', '\a', '\x4', '\x2', '\x2', '\x30', '\x31', 
		'\a', '\x10', '\x2', '\x2', '\x31', '\x33', '\a', '\x16', '\x2', '\x2', 
		'\x32', '\x34', '\a', '\x11', '\x2', '\x2', '\x33', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x34', '\a', 
		'\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\a', '\x3', '\x2', '\x2', 
		'\x36', '\x37', '\a', '\x11', '\x2', '\x2', '\x37', '\x38', '\a', '\x5', 
		'\x2', '\x2', '\x38', '\x39', '\a', '\x10', '\x2', '\x2', '\x39', ':', 
		'\a', '\x12', '\x2', '\x2', ':', ';', '\a', '\x11', '\x2', '\x2', ';', 
		'=', '\a', '\x16', '\x2', '\x2', '<', '>', '\a', '\x11', '\x2', '\x2', 
		'=', '<', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', 
		'>', '\t', '\x3', '\x2', '\x2', '\x2', '?', '@', '\a', '\x3', '\x2', '\x2', 
		'@', '\x41', '\a', '\x11', '\x2', '\x2', '\x41', '\x42', '\a', '\x6', 
		'\x2', '\x2', '\x42', '\x43', '\a', '\x10', '\x2', '\x2', '\x43', '\x44', 
		'\a', '\x12', '\x2', '\x2', '\x44', '\x45', '\a', '\x11', '\x2', '\x2', 
		'\x45', 'G', '\a', '\x16', '\x2', '\x2', '\x46', 'H', '\a', '\x11', '\x2', 
		'\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\v', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\a', '\x3', 
		'\x2', '\x2', 'J', 'K', '\a', '\x11', '\x2', '\x2', 'K', 'L', '\a', '\a', 
		'\x2', '\x2', 'L', 'M', '\a', '\x10', '\x2', '\x2', 'M', 'N', '\a', '\x12', 
		'\x2', '\x2', 'N', 'O', '\a', '\x11', '\x2', '\x2', 'O', 'Q', '\a', '\x16', 
		'\x2', '\x2', 'P', 'R', '\a', '\x11', '\x2', '\x2', 'Q', 'P', '\x3', '\x2', 
		'\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 'R', '\r', '\x3', 
		'\x2', '\x2', '\x2', 'S', 'T', '\a', '\x3', '\x2', '\x2', 'T', 'U', '\a', 
		'\x11', '\x2', '\x2', 'U', 'V', '\a', '\b', '\x2', '\x2', 'V', 'W', '\a', 
		'\x10', '\x2', '\x2', 'W', 'X', '\a', '\x12', '\x2', '\x2', 'X', 'Y', 
		'\a', '\x11', '\x2', '\x2', 'Y', '[', '\a', '\x16', '\x2', '\x2', 'Z', 
		'\\', '\a', '\x11', '\x2', '\x2', '[', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', '\xF', '\x3', '\x2', '\x2', 
		'\x2', ']', '^', '\a', '\x3', '\x2', '\x2', '^', '_', '\a', '\x11', '\x2', 
		'\x2', '_', '`', '\a', '\t', '\x2', '\x2', '`', '\x61', '\a', '\x10', 
		'\x2', '\x2', '\x61', '\x62', '\a', '\x12', '\x2', '\x2', '\x62', '\x63', 
		'\a', '\x11', '\x2', '\x2', '\x63', 'j', '\a', '\x16', '\x2', '\x2', '\x64', 
		'\x65', '\a', '\xF', '\x2', '\x2', '\x65', '\x66', '\a', '\x12', '\x2', 
		'\x2', '\x66', 'g', '\a', '\x11', '\x2', '\x2', 'g', 'i', '\a', '\x16', 
		'\x2', '\x2', 'h', '\x64', '\x3', '\x2', '\x2', '\x2', 'i', 'l', '\x3', 
		'\x2', '\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', 
		'\x2', '\x2', '\x2', 'k', 'n', '\x3', '\x2', '\x2', '\x2', 'l', 'j', '\x3', 
		'\x2', '\x2', '\x2', 'm', 'o', '\a', '\x11', '\x2', '\x2', 'n', 'm', '\x3', 
		'\x2', '\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 'o', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'p', 'q', '\a', '\x3', '\x2', '\x2', 'q', 
		'r', '\a', '\x11', '\x2', '\x2', 'r', 's', '\a', '\n', '\x2', '\x2', 's', 
		'y', '\a', '\x10', '\x2', '\x2', 't', 'u', '\a', '\x15', '\x2', '\x2', 
		'u', 'v', '\a', '\x11', '\x2', '\x2', 'v', 'x', '\a', '\x16', '\x2', '\x2', 
		'w', 't', '\x3', '\x2', '\x2', '\x2', 'x', '{', '\x3', '\x2', '\x2', '\x2', 
		'y', 'w', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x3', '\x2', '\x2', '\x2', 
		'z', '}', '\x3', '\x2', '\x2', '\x2', '{', 'y', '\x3', '\x2', '\x2', '\x2', 
		'|', '~', '\a', '\x11', '\x2', '\x2', '}', '|', '\x3', '\x2', '\x2', '\x2', 
		'}', '~', '\x3', '\x2', '\x2', '\x2', '~', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '\x17', ' ', '&', '\x33', '=', 'G', 'Q', '[', 'j', 'n', 
		'y', '}',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
